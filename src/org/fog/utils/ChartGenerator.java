package org.fog.utils;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.DefaultCategoryDataset;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 * ChartGenerator - Creates JUnit-style bar charts from simulation metrics
 * 
 * This class reads metrics from JSON files generated by simulations
 * and creates bar charts comparing different DRL approaches.
 */
public class ChartGenerator {
    
    private static final int WIDTH = 800;
    private static final int HEIGHT = 600;
    private static final Font TITLE_FONT = new Font("Arial", Font.BOLD, 18);
    private static final Font LABEL_FONT = new Font("Arial", Font.PLAIN, 14);

    /**
     * Main method to generate charts from metrics JSON file
     */
    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println("Usage: java org.fog.utils.ChartGenerator <metrics-json-file>");
            System.exit(1);
        }

        String metricsFile = args[0];
        String outputDir = new File(metricsFile).getParent();
        
        // Create charts directory if it doesn't exist
        // Extract timestamp from metrics file path
        String timestamp = new File(outputDir).getName();
        String chartsPath = outputDir.replace("/data/", "/charts/");
        File chartsDir = new File(chartsPath);
        if (!chartsDir.exists()) {
            chartsDir.mkdirs();
        }
        
        try {
            // Parse JSON metrics file
            JSONParser parser = new JSONParser();
            JSONObject metrics = (JSONObject) parser.parse(new FileReader(metricsFile));
            
            // Generate charts for each metric
            generateExecutionTimeChart(metrics, chartsDir.getPath());
            generateEnergyConsumptionChart(metrics, chartsDir.getPath());
            generateNetworkUsageChart(metrics, chartsDir.getPath());
            
            System.out.println("Charts generated successfully in: " + chartsDir.getPath());
        } catch (Exception e) {
            System.err.println("Error generating charts: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Generates a bar chart for execution time comparison
     */
    private static void generateExecutionTimeChart(JSONObject metrics, String outputDir) throws IOException {
        // Create dataset for execution time
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        JSONObject executionTime = (JSONObject) metrics.get("execution_time");
        
        // Add data points to the dataset
        executionTime.keySet().forEach(key -> {
            double value = ((Number) executionTime.get(key)).doubleValue();
            dataset.addValue(value, "Execution Time (ms)", (String) key);
        });
        
        // Create the chart
        JFreeChart chart = createBarChart(
                "Execution Time Comparison", 
                "Simulation Type", 
                "Time (ms)", 
                dataset,
                Color.BLUE);
        
        // Save chart as PNG
        ChartUtils.saveChartAsPNG(
                new File(outputDir + "/execution_time_chart.png"), 
                chart, WIDTH, HEIGHT);
    }
    
    /**
     * Generates a bar chart for energy consumption comparison
     */
    private static void generateEnergyConsumptionChart(JSONObject metrics, String outputDir) throws IOException {
        // Create dataset for energy consumption
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        JSONObject energyConsumption = (JSONObject) metrics.get("energy_consumption");
        
        // Add data points to the dataset
        energyConsumption.keySet().forEach(key -> {
            double value = ((Number) energyConsumption.get(key)).doubleValue();
            // Convert to K units for better readability
            dataset.addValue(value / 1000, "Energy Consumption (K units)", (String) key);
        });
        
        // Create the chart
        JFreeChart chart = createBarChart(
                "Energy Consumption Comparison", 
                "Simulation Type", 
                "Energy (K units)", 
                dataset,
                Color.GREEN.darker());
        
        // Save chart as PNG
        ChartUtils.saveChartAsPNG(
                new File(outputDir + "/energy_consumption_chart.png"), 
                chart, WIDTH, HEIGHT);
    }
    
    /**
     * Generates a bar chart for network usage comparison
     */
    private static void generateNetworkUsageChart(JSONObject metrics, String outputDir) throws IOException {
        // Create dataset for network usage
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        JSONObject networkUsage = (JSONObject) metrics.get("network_usage");
        
        // Add data points to the dataset
        networkUsage.keySet().forEach(key -> {
            double value = ((Number) networkUsage.get(key)).doubleValue();
            dataset.addValue(value, "Network Usage (bytes)", (String) key);
        });
        
        // Create the chart
        JFreeChart chart = createBarChart(
                "Network Usage Comparison", 
                "Simulation Type", 
                "Network Usage (bytes)", 
                dataset,
                Color.ORANGE);
        
        // Save chart as PNG
        ChartUtils.saveChartAsPNG(
                new File(outputDir + "/network_usage_chart.png"), 
                chart, WIDTH, HEIGHT);
    }
    
    /**
     * Helper method to create a formatted bar chart
     */
    private static JFreeChart createBarChart(String title, String xLabel, String yLabel, 
            DefaultCategoryDataset dataset, Color barColor) {
        
        // Create the chart
        JFreeChart chart = ChartFactory.createBarChart(
                title,
                xLabel,
                yLabel,
                dataset,
                PlotOrientation.VERTICAL,
                true, // include legend
                true, // include tooltips
                false // include URLs
        );
        
        // Customize the chart
        chart.setBackgroundPaint(Color.white);
        
        // Set the main title with timestamp
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String timestamp = sdf.format(new Date());
        TextTitle textTitle = new TextTitle(title + "\nGenerated: " + timestamp);
        textTitle.setFont(TITLE_FONT);
        chart.setTitle(textTitle);
        
        // Get the plot
        CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(new Color(245, 245, 250));
        plot.setRangeGridlinePaint(Color.LIGHT_GRAY);
        
        // Customize the bar renderer
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setSeriesPaint(0, barColor);
        renderer.setItemMargin(0.1);
        // Removed setShadowsVisible as it's not available in this version
        renderer.setDrawBarOutline(true);
        renderer.setDefaultItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        renderer.setDefaultItemLabelsVisible(true);
        
        // Customize the axes
        CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setLabelFont(LABEL_FONT);
        domainAxis.setTickLabelFont(LABEL_FONT);
        
        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setLabelFont(LABEL_FONT);
        rangeAxis.setTickLabelFont(LABEL_FONT);
        
        return chart;
    }
}
